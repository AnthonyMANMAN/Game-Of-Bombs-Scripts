// Direct approach to manipulate the Angular chat model
function directChatSend(message) {
    if (!message || typeof message !== 'string' || message.trim() === '') {
        console.error('Please provide a valid message');
        return false;
    }
    
    console.log('Attempting direct chat manipulation for message:', message);
    
    try {
        // Get the chat list and its Angular scope
        const chatList = document.getElementById('listChat');
        if (!chatList) {
            console.error('Chat list element not found');
            return false;
        }
        
        const scope = angular.element(chatList).scope();
        if (!scope) {
            console.error('Angular scope not found');
            return false;
        }
        
        // Examine existing chat messages to understand the structure
        console.log('Chat array found:', scope.chat);
        
        // Find a regular user message to clone
        const regularMsg = scope.chat.find(msg => msg && !msg.special && msg.nickname);
        if (!regularMsg) {
            console.error('Could not find a regular message to use as template');
            return false;
        }
        
        console.log('Using this message as template:', regularMsg);
        
        // FIXED: Get access to $sce service to mark content as trusted
        const $sce = angular.element(document.body).injector().get('$sce');
        
        // Create a new message that looks like a regular message (not from a guest)
        const newMsg = {
            // Copy essential properties, marking text as trusted HTML
            text: $sce.trustAsHtml(message),
            showTime: true,
            
            // Use an existing user's nickname instead of a guest name
            nickname: regularMsg.nickname,
            
            // Important: don't set 'my' to true as it might be filtered
            my: false,
            
            // Important: don't include special:'guest' which triggers the restriction
            special: undefined
        };
        
        // Add to the chat array
        scope.chat.push(newMsg);
        
        // Apply the changes to update the UI
        if (typeof scope.$apply === 'function') {
            scope.$apply();
        }
        
        console.log('Message added to chat display:', newMsg);
        
        return true;
    } catch (error) {
        console.error('Error in directChatSend:', error);
        return false;
    }
}

// Improved function to inject a fake user message
function injectFakeUserMessage(message, username) {
    if (!message || typeof message !== 'string' || message.trim() === '') {
        console.error('Please provide a valid message');
        return false;
    }
    
    // Use one of the existing usernames if none provided
    if (!username) {
        const chatList = document.getElementById('listChat');
        if (chatList) {
            const scope = angular.element(chatList).scope();
            if (scope && scope.chat) {
                // Find a real username from the chat
                const realUser = scope.chat.find(msg => msg && !msg.special && msg.nickname);
                if (realUser) {
                    username = realUser.nickname;
                }
            }
        }
        
        // Fallback if no username found
        if (!username) {
            username = 'User' + Math.floor(Math.random() * 10000);
        }
    }
    
    console.log(`Injecting message as user "${username}": ${message}`);
    
    try {
        // Get the chat list and its Angular scope
        const chatList = document.getElementById('listChat');
        if (!chatList) {
            console.error('Chat list element not found');
            return false;
        }
        
        const scope = angular.element(chatList).scope();
        if (!scope || !scope.chat) {
            console.error('Chat array not found in scope');
            return false;
        }
        
        // FIXED: Get access to $sce service to mark content as trusted
        const $sce = angular.element(document.body).injector().get('$sce');
        
        // Create a message that looks like it's from another user
        const newMsg = {
            nickname: username,
            text: $sce.trustAsHtml(message),
            showTime: true,
            special: undefined, // Important: no special flag
            my: false // Not from "me"
        };
        
        // Add to chat array
        scope.chat.push(newMsg);
        
        // Apply changes
        if (typeof scope.$apply === 'function') {
            scope.$apply();
        }
        
        console.log('Message injected successfully');
        return true;
    } catch (error) {
        console.error('Error injecting fake message:', error);
        return false;
    }
}

// Alternative approach: find and use the original send function
function findAndUseSendFunction(message) {
    console.log('Trying to find and use the original send function...');
    
    try {
        // Look for chat controller in the DOM
        const chatElements = document.querySelectorAll('[ng-controller]');
        let chatController = null;
        
        for (const el of chatElements) {
            const controllerName = el.getAttribute('ng-controller');
            if (controllerName && controllerName.toLowerCase().includes('chat')) {
                chatController = el;
                console.log(`Found potential chat controller: ${controllerName}`);
                break;
            }
        }
        
        if (!chatController) {
            console.error('Could not find chat controller');
            return false;
        }
        
        // Get the controller's scope
        const scope = angular.element(chatController).scope();
        if (!scope) {
            console.error('Could not get controller scope');
            return false;
        }
        
        // Look for send-related methods
        const sendMethods = Object.keys(scope).filter(key => 
            typeof scope[key] === 'function' && 
            (key.toLowerCase().includes('send') || 
             key.toLowerCase().includes('chat') ||
             key.toLowerCase().includes('message'))
        );
        
        console.log('Potential send methods:', sendMethods);
        
        // Try calling each potential send method
        for (const method of sendMethods) {
            try {
                console.log(`Trying method: ${method}`);
                scope[method](message);
                console.log(`Method ${method} called successfully!`);
                return true;
            } catch (e) {
                console.log(`Method ${method} failed:`, e);
            }
        }
        
        console.error('Could not find a working send method');
        return false;
    } catch (error) {
        console.error('Error finding send function:', error);
        return false;
    }
}

// Helper function to analyze chat structure
function analyzeChatStructure() {
    const chatList = document.getElementById('listChat');
    if (!chatList) {
        console.error('Chat list element not found');
        return null;
    }
    
    const scope = angular.element(chatList).scope();
    if (!scope || !scope.chat) {
        console.error('Chat array not found in scope');
        return null;
    }
    
    // Check for HTML encoding in messages
    const htmlAnalysis = scope.chat.map(msg => {
        return {
            text: msg.text,
            isHtmlObject: msg.text && typeof msg.text === 'object',
            hasHtmlFn: msg.text && typeof msg.text.$$unwrapTrustedValue === 'function',
            rawContent: msg.text && typeof msg.text.$$unwrapTrustedValue === 'function' 
                ? msg.text.$$unwrapTrustedValue() 
                : msg.text
        };
    });
    
    console.log('HTML content analysis:', htmlAnalysis);
    
    // Analyze what makes a message appear as from a specific user
    const messageTypes = {};
    
    scope.chat.forEach((msg, index) => {
        // Create a key based on message properties
        const type = 
            (msg.my ? 'my:' : 'other:') + 
            (msg.special ? `special:${msg.special}:` : 'regular:') +
            (msg.nickname ? `user:${msg.nickname}` : 'anonymous');
        
        if (!messageTypes[type]) {
            messageTypes[type] = [];
        }
        
        messageTypes[type].push({index, message: msg});
    });
    
    console.log('Message types in chat:', messageTypes);
    return messageTypes;
}

// Search for indicators of how the chat system works
function investigateChatSystem() {
    console.log('Investigating chat system...');
    
    // Check Angular version
    if (window.angular && angular.version) {
        console.log('Angular version:', angular.version.full);
    }
    
    // Check for angular modules
    if (window.angular) {
        try {
            const modules = angular.module('ng').requires;
            console.log('Angular modules loaded:', modules);
        } catch (e) {
            console.log('Could not list Angular modules');
        }
    }
    
    // Check for socket.io
    if (window.io) {
        console.log('Socket.io found! This might be using WebSockets for chat.');
    }
    
    // Check for common chat libraries
    ['firebase', 'pusher', 'pubnub', 'signalr'].forEach(lib => {
        if (window[lib]) {
            console.log(`Found ${lib} library, might be using it for chat.`);
        }
    });
    
    // Look for network requests related to chat
    console.log('Check the Network tab in DevTools for XHR/WebSocket requests with "chat", "message", or "socket" in the URL.');
    
    // Print key scope methods and properties
    const chatList = document.getElementById('listChat');
    if (chatList) {
        const scope = angular.element(chatList).scope();
        if (scope) {
            console.log('Chat scope methods:', 
                Object.keys(scope).filter(key => typeof scope[key] === 'function'));
            console.log('Chat scope properties:', 
                Object.keys(scope).filter(key => typeof scope[key] !== 'function'));
        }
    }
}

// Run analyzers
analyzeChatStructure();
findChatControllers();
investigateChatSystem();

// Add shorthand functions
const send = directChatSend;
const fakeMsg = injectFakeUserMessage;
const findSend = findAndUseSendFunction;

console.log('Chat helper loaded!');
console.log('- Use send("message") to try adding a message directly to the chat');
console.log('- Use fakeMsg("message", "username") to add a message that appears to be from another user');
console.log('- Use findSend("message") to try to find and use the original send function');
console.log('- Use analyzeChatStructure() to examine message structure');
console.log('Note: These functions can only add messages to your local view. Server restrictions may prevent others from seeing them.');

// Helper function to check if we can find any Angular controllers
function findChatControllers() {
    console.log('Looking for Angular controllers that might handle chat...');
    
    try {
        // Get all elements with ng-controller attribute
        const controllerElements = document.querySelectorAll('[ng-controller]');
        console.log(`Found ${controllerElements.length} controller elements`);
        
        controllerElements.forEach(el => {
            const controllerName = el.getAttribute('ng-controller');
            const scope = angular.element(el).scope();
            
            console.log(`Controller: ${controllerName}`, scope);
            
            // Look for relevant methods
            if (scope) {
                const methods = Object.keys(scope).filter(key => 
                    typeof scope[key] === 'function' && 
                    (key.toLowerCase().includes('send') || 
                     key.toLowerCase().includes('message') || 
                     key.toLowerCase().includes('chat'))
                );
                
                if (methods.length > 0) {
                    console.log(`Potential chat methods in ${controllerName}:`, methods);
                }
            }
        });
        
        return true;
    } catch (error) {
        console.error('Error finding controllers:', error);
        return false;
    }
}
