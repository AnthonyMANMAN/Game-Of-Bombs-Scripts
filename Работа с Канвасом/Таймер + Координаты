(() => {
  const loggedCalls = new Set();
  let isPaused = false;
  let hookedContexts = new Set();
  let currentTimer = '--:--';
  let playerCoords = { x: '--', y: '--' };
  
  // Create UI popup
  const createUI = () => {
    const popup = document.createElement('div');
    popup.id = 'canvas-spy-ui';
    popup.style.cssText = `
      position: fixed;
      top: 20px;
      right: 120px;
      background: #2d3748;
      color: white;
      padding: 12px 16px;
      border-radius: 8px;
      font-family: monospace;
      font-size: 12px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      z-index: 10000;
      display: flex;
      flex-direction: column;
      gap: 8px;
      user-select: none;
      cursor: default;
      min-width: 180px;
    `;
    
    // Header with controls
    const header = document.createElement('div');
    header.style.cssText = `
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 12px;
    `;
    
    const status = document.createElement('span');
    status.id = 'canvas-spy-status';
    status.textContent = 'CanvasSpy: Running';
    status.style.color = '#48bb78';
    
    const controls = document.createElement('div');
    controls.style.cssText = `
      display: flex;
      gap: 4px;
    `;
    
    const toggleButton = document.createElement('button');
    toggleButton.textContent = 'Pause';
    toggleButton.style.cssText = `
      background: #4299e1;
      color: white;
      border: none;
      padding: 4px 8px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 11px;
      font-family: monospace;
    `;
    
    const closeButton = document.createElement('button');
    closeButton.textContent = 'Ã—';
    closeButton.style.cssText = `
      background: #e53e3e;
      color: white;
      border: none;
      padding: 2px 6px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      font-weight: bold;
      line-height: 1;
    `;
    
    controls.appendChild(toggleButton);
    controls.appendChild(closeButton);
    header.appendChild(status);
    header.appendChild(controls);
    
    // Timer display
    const timerDiv = document.createElement('div');
    timerDiv.style.cssText = `
      border-top: 1px solid #4a5568;
      padding-top: 8px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    `;
    
    const timerLabel = document.createElement('span');
    timerLabel.textContent = 'Timer:';
    timerLabel.style.color = '#a0aec0';
    
    const timerValue = document.createElement('span');
    timerValue.id = 'canvas-spy-timer';
    timerValue.textContent = currentTimer;
    timerValue.style.cssText = `
      color: #68d391;
      font-weight: bold;
    `;
    
    timerDiv.appendChild(timerLabel);
    timerDiv.appendChild(timerValue);
    
    // Coordinates display
    const coordsDiv = document.createElement('div');
    coordsDiv.style.cssText = `
      display: flex;
      justify-content: space-between;
      align-items: center;
    `;
    
    const coordsLabel = document.createElement('span');
    coordsLabel.textContent = 'Player:';
    coordsLabel.style.color = '#a0aec0';
    
    const coordsValue = document.createElement('span');
    coordsValue.id = 'canvas-spy-coords';
    coordsValue.textContent = `x:${playerCoords.x}, y:${playerCoords.y}`;
    coordsValue.style.cssText = `
      color: #63b3ed;
      font-weight: bold;
    `;
    
    coordsDiv.appendChild(coordsLabel);
    coordsDiv.appendChild(coordsValue);
    
    popup.appendChild(header);
    popup.appendChild(timerDiv);
    popup.appendChild(coordsDiv);
    document.body.appendChild(popup);
    
    return { popup, status, toggleButton, closeButton, timerValue, coordsValue };
  };
  
  const ui = createUI();
  
  const updateUI = () => {
    if (isPaused) {
      ui.status.textContent = 'CanvasSpy: Paused';
      ui.status.style.color = '#ed8936';
      ui.toggleButton.textContent = 'Resume';
      ui.toggleButton.style.background = '#48bb78';
    } else {
      ui.status.textContent = 'CanvasSpy: Running';
      ui.status.style.color = '#48bb78';
      ui.toggleButton.textContent = 'Pause';
      ui.toggleButton.style.background = '#4299e1';
    }
    
    // Update timer and coordinates
    ui.timerValue.textContent = currentTimer;
    ui.coordsValue.textContent = `x:${playerCoords.x}, y:${playerCoords.y}`;
  };
  
  const parseAndUpdateData = (callSignature) => {
    // Parse timer from fillText calls like "fillText(4:00, 21, 13)"
    const timerMatch = callSignature.match(/fillText\(([0-9]+:[0-9]+),/);
    if (timerMatch) {
      currentTimer = timerMatch[1];
    }
    
    // Parse coordinates from fillText calls like "fillText(16, 9, 21, 13)"
    // Look for pattern where first two numeric values are both below 32
    const coordMatch = callSignature.match(/fillText\((\d+),\s*(\d+),\s*\d+,\s*\d+\)/);
    if (coordMatch) {
      const x = parseInt(coordMatch[1]);
      const y = parseInt(coordMatch[2]);
      
      if (x < 32 && y < 32) {
        playerCoords.x = x;
        playerCoords.y = y;
      }
    }
  };
  
  const togglePause = () => {
    isPaused = !isPaused;
    updateUI();
    console.log(`[CanvasSpy] ${isPaused ? 'Paused' : 'Resumed'}`);
  };
  
  const cleanup = () => {
    // Remove UI
    if (ui.popup.parentNode) {
      ui.popup.parentNode.removeChild(ui.popup);
    }
    
    // Stop observer
    if (window.canvasSpyObserver) {
      window.canvasSpyObserver.disconnect();
    }
    
    console.log('[CanvasSpy] Stopped (hooked methods remain active)');
  };
  
  // Event listeners
  ui.toggleButton.addEventListener('click', togglePause);
  ui.closeButton.addEventListener('click', cleanup);
  
  const hookCanvasContext = (ctx) => {
    if (ctx._spyAttached) return;
    
    const proto = Object.getPrototypeOf(ctx);
    
    for (const key of Object.getOwnPropertyNames(proto)) {
      const original = ctx[key];
      if (typeof original !== 'function') continue;
      if (key === 'constructor') continue;
      
      ctx[key] = function (...args) {
        if (!isPaused) {
          const callSignature = `${key}(${args.map(a => stringifyArg(a)).join(", ")})`;
          if (!loggedCalls.has(callSignature)) {
            loggedCalls.add(callSignature);
            console.log(`[CanvasSpy] ${callSignature}`);
            
            // Parse and update timer/coordinates data
            parseAndUpdateData(callSignature);
            updateUI();
          }
        }
        return original.apply(this, args);
      };
    }
    
    hookedContexts.add(ctx);
    ctx._spyAttached = true;
  };
  
  const stringifyArg = (arg) => {
    if (arg instanceof HTMLImageElement) return '[HTMLImageElement]';
    if (arg instanceof CanvasRenderingContext2D) return '[CanvasRenderingContext2D]';
    if (arg instanceof HTMLCanvasElement) return '[Canvas]';
    if (arg instanceof Path2D) return '[Path2D]';
    if (typeof arg === 'object') return JSON.stringify(arg);
    return String(arg);
  };
  
  const hookAllCanvases = () => {
    const canvases = document.querySelectorAll('canvas');
    for (const canvas of canvases) {
      const ctx = canvas.getContext('2d');
      if (ctx && !ctx._spyAttached) {
        hookCanvasContext(ctx);
        console.log('[CanvasSpy] Hooked canvas:', canvas);
      }
    }
  };
  
  // Initial hook
  hookAllCanvases();
  
  // Watch for new canvases
  const observer = new MutationObserver(hookAllCanvases);
  observer.observe(document.body, { childList: true, subtree: true });
  window.canvasSpyObserver = observer; // Store reference for cleanup
  
  console.log('[CanvasSpy] Running with timer and coordinate tracking...');
})();
