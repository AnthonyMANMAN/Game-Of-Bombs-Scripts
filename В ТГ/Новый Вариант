(function() {
    'use strict';

    // ‚ö†Ô∏è –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø:
    const BOT_TOKEN = '7860609958:AAGSCiD2BFAfnUO6hWY-GW-VbKjVp2nifPY';  // –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç @BotFather
    const CHAT_ID = '-1002599400013';      // ID –≤–∞—à–µ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)

    // –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ
    
    let sentMessages = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º: { serverName: Set() }
    let observer = null;
    let currentServer = null;
    let isMonitoring = false;
    let serverCycleInterval = null;
    let targetServerNames = ['US', 'EU', 'RU', 'BR', 'AU', 'JP']; // –°–µ—Ä–≤–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ü–∏–∫–ª–æ–≤
    let currentTargetIndex = 0;
    let uiCreated = false;

    function createUI() {
        if (uiCreated) return;
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const container = document.createElement('div');
        container.id = 'gob-monitor-ui';
        container.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 10000;
            background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);
            border: 2px solid #4a5568;
            border-radius: 12px;
            padding: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: 14px;
            color: #e2e8f0;
            min-width: 350px;
            backdrop-filter: blur(10px);
        `;

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const title = document.createElement('div');
        title.innerHTML = 'üéÆ <strong>–ú–æ–Ω–∏—Ç–æ—Ä Game of Bombs</strong>';
        title.style.cssText = `
            text-align: center;
            margin-bottom: 12px;
            font-size: 16px;
            color: #63b3ed;
            border-bottom: 1px solid #4a5568;
            padding-bottom: 8px;
        `;

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        const status = document.createElement('div');
        status.id = 'gob-status';
        status.style.cssText = `
            background: #2d3748;
            padding: 8px;
            border-radius: 6px;
            margin-bottom: 10px;
            text-align: center;
            border: 1px solid #4a5568;
        `;
        status.textContent = 'üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...';

        // –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
        const serverSection = document.createElement('div');
        serverSection.style.marginBottom = '10px';
        
        const serverLabel = document.createElement('div');
        serverLabel.textContent = '–¶–µ–ª–µ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:';
        serverLabel.style.cssText = `
            font-weight: bold;
            margin-bottom: 5px;
            color: #a0aec0;
        `;
        
        const serverCheckboxes = document.createElement('div');
        serverCheckboxes.style.cssText = `
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 5px;
            margin-bottom: 10px;
        `;
        
        ['US', 'EU', 'RU', 'BR', 'AU', 'JP'].forEach(server => {
            const checkboxContainer = document.createElement('label');
            checkboxContainer.style.cssText = `
                display: flex;
                align-items: center;
                cursor: pointer;
                padding: 3px;
                border-radius: 4px;
                transition: background-color 0.2s;
            `;
            checkboxContainer.onmouseover = () => checkboxContainer.style.backgroundColor = '#4a5568';
            checkboxContainer.onmouseout = () => checkboxContainer.style.backgroundColor = 'transparent';
            
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = server;
            checkbox.checked = targetServerNames.includes(server);
            checkbox.style.cssText = `
                margin-right: 5px;
                accent-color: #63b3ed;
            `;
            checkbox.addEventListener('change', updateTargetServers);
            
            const label = document.createElement('span');
            label.textContent = server;
            label.style.fontSize = '12px';
            
            checkboxContainer.appendChild(checkbox);
            checkboxContainer.appendChild(label);
            serverCheckboxes.appendChild(checkboxContainer);
        });

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const buttonContainer = document.createElement('div');
        buttonContainer.style.cssText = `
            display: flex;
            gap: 8px;
            justify-content: center;
            margin-bottom: 10px;
        `;

        const startButton = document.createElement('button');
        startButton.id = 'gob-start-btn';
        startButton.textContent = '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ü–∏–∫–ª';
        startButton.style.cssText = `
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
            color: white;
            border: none;
            border-radius: 6px;
            padding: 8px 12px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        `;
        startButton.onclick = toggleServerCycle;

        const stopButton = document.createElement('button');
        stopButton.id = 'gob-stop-btn';
        stopButton.textContent = '‚èπÔ∏è –°—Ç–æ–ø';
        stopButton.style.cssText = `
            background: linear-gradient(135deg, #e53e3e 0%, #c53030 100%);
            color: white;
            border: none;
            border-radius: 6px;
            padding: 8px 12px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        `;
        stopButton.onclick = stopServerCycle;

        const checkButton = document.createElement('button');
        checkButton.textContent = 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π';
        checkButton.style.cssText = `
            background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
            color: white;
            border: none;
            border-radius: 6px;
            padding: 8px 12px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        `;
        checkButton.onclick = checkCurrentServer;

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
        [startButton, stopButton, checkButton].forEach(btn => {
            btn.onmouseover = () => {
                btn.style.transform = 'translateY(-1px)';
                btn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.3)';
            };
            btn.onmouseout = () => {
                btn.style.transform = 'translateY(0)';
                btn.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';
            };
        });

        // –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const stats = document.createElement('div');
        stats.id = 'gob-stats';
        stats.style.cssText = `
            font-size: 11px;
            color: #a0aec0;
            text-align: center;
            background: #1a202c;
            padding: 6px;
            border-radius: 6px;
            border: 1px solid #2d3748;
        `;
        stats.innerHTML = 'üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <span id="gob-message-count">0</span>';

        // –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        const minimizeBtn = document.createElement('button');
        minimizeBtn.innerHTML = '‚ûñ';
        minimizeBtn.style.cssText = `
            position: absolute;
            top: 5px;
            right: 5px;
            background: none;
            border: none;
            color: #a0aec0;
            cursor: pointer;
            font-size: 16px;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            transition: all 0.2s;
        `;
        minimizeBtn.onclick = toggleMinimize;
        minimizeBtn.onmouseover = () => {
            minimizeBtn.style.backgroundColor = '#4a5568';
            minimizeBtn.style.color = '#e2e8f0';
        };
        minimizeBtn.onmouseout = () => {
            minimizeBtn.style.backgroundColor = 'transparent';
            minimizeBtn.style.color = '#a0aec0';
        };

        // –°–±–æ—Ä–∫–∞ UI
        serverSection.appendChild(serverLabel);
        serverSection.appendChild(serverCheckboxes);
        
        buttonContainer.appendChild(startButton);
        buttonContainer.appendChild(stopButton);
        buttonContainer.appendChild(checkButton);

        container.appendChild(minimizeBtn);
        container.appendChild(title);
        container.appendChild(status);
        container.appendChild(serverSection);
        container.appendChild(buttonContainer);
        container.appendChild(stats);

        document.body.appendChild(container);
        uiCreated = true;
        
        console.log('üé® UI —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–∑–º–µ—â–µ–Ω –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–≤–µ—Ä—Ö—É');
    }

    function toggleMinimize() {
        const container = document.getElementById('gob-monitor-ui');
        const minimizeBtn = container.querySelector('button');
        const isMinimized = container.style.height === '50px';
        
        if (isMinimized) {
            // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å
            container.style.height = 'auto';
            container.style.overflow = 'visible';
            minimizeBtn.innerHTML = '‚ûñ';
            Array.from(container.children).forEach((child, index) => {
                if (index > 0) child.style.display = 'block';
            });
        } else {
            // –°–≤–µ—Ä–Ω—É—Ç—å
            container.style.height = '50px';
            container.style.overflow = 'hidden';
            minimizeBtn.innerHTML = '‚ûï';
            Array.from(container.children).forEach((child, index) => {
                if (index > 0) child.style.display = 'none';
            });
        }
    }

    function updateStatus(message = null) {
        const statusEl = document.getElementById('gob-status');
        if (!statusEl) return;

        if (message) {
            statusEl.textContent = message;
        } else {
            const cyclingStatus = serverCycleInterval ? 'üîÑ –¶–∏–∫–ª–∏—Ä—É–µ—Ç—Å—è' : '‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
            const serverInfo = currentServer ? `–Ω–∞ ${currentServer}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä';
            const totalMessages = Object.values(sentMessages).reduce((sum, set) => sum + set.size, 0);
            
            statusEl.innerHTML = `${cyclingStatus} ${serverInfo} | üì® ${totalMessages} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            const counterEl = document.getElementById('gob-message-count');
            if (counterEl) {
                counterEl.textContent = totalMessages;
            }
        }
    }

    function updateTargetServers() {
        const checkboxes = document.querySelectorAll('#gob-monitor-ui input[type="checkbox"]');
        targetServerNames = Array.from(checkboxes)
            .filter(cb => cb.checked)
            .map(cb => cb.value);
        
        console.log('üéØ –¶–µ–ª–µ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', targetServerNames);
        updateStatus();
    }

    function toggleServerCycle() {
        if (serverCycleInterval) {
            stopServerCycle();
        } else {
            startServerCycle();
        }
    }

    function stopServerCycle() {
        if (serverCycleInterval) {
            clearInterval(serverCycleInterval);
            serverCycleInterval = null;
            console.log('‚èπÔ∏è –¶–∏–∫–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
        updateStatus();
        
        const startBtn = document.getElementById('gob-start-btn');
        if (startBtn) startBtn.textContent = '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ü–∏–∫–ª';
    }

    async function checkCurrentServer() {
        const server = getCurrentServer();
        console.log(`üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ${server}...`);
        updateStatus(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${server}...`);
        
        try {
            await checkAndSendServerMessages(server);
            updateStatus();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
            updateStatus('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
        }
    }

    function init() {
        console.log('üéÆ –ú–Ω–æ–≥–æ—Å–µ—Ä–≤–µ—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä Game of Bombs –∑–∞–≥—Ä—É–∂–µ–Ω');
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                setTimeout(() => {
                    createUI();
                    startMonitoring();
                }, 3000);
            });
        } else {
            setTimeout(() => {
                createUI();
                startMonitoring();
            }, 3000);
        }
    }

    function getCurrentServer() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ
        const selectedServer = document.querySelector('#server-select .server-list li.selected h2');
        if (selectedServer) {
            return selectedServer.textContent.trim().toUpperCase();
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        const serverButton = document.querySelector('.butt_left_menu.ng-binding .colorRed');
        if (serverButton) {
            return serverButton.textContent.trim().toUpperCase();
        }
        
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    }

    function getAvailableServers() {
        const serverElements = document.querySelectorAll('#server-select .server-list li:not(.down)');
        return Array.from(serverElements).map(el => {
            const nameEl = el.querySelector('h2');
            return nameEl ? nameEl.textContent.trim() : null;
        }).filter(name => name !== null && name !== 'DEV'); // –ò—Å–∫–ª—é—á–∞–µ–º DEV —Å–µ—Ä–≤–µ—Ä
    }

    function getNextTargetServer() {
        const availableServers = getAvailableServers();
        const currentServer = getCurrentServer();
        
        // –ü–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –Ω–∞—à–µ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º
        let attempts = 0;
        while (attempts < targetServerNames.length) {
            const targetServer = targetServerNames[currentTargetIndex];
            currentTargetIndex = (currentTargetIndex + 1) % targetServerNames.length;
            
            // –ï—Å–ª–∏ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (availableServers.includes(targetServer) && targetServer !== currentServer) {
                return targetServer;
            }
            attempts++;
        }
        
        // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º
        const otherServers = availableServers.filter(server => server !== currentServer);
        return otherServers.length > 0 ? otherServers[0] : null;
    }

    function switchToServer(serverName) {
        // –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Ä—è–¥–æ–∫ –º–µ–Ω—è–µ—Ç—Å—è
        const serverElements = document.querySelectorAll('#server-select .server-list li:not(.down)');
        for (const serverEl of serverElements) {
            const serverNameEl = serverEl.querySelector('h2');
            if (serverNameEl && serverNameEl.textContent.trim() === serverName) {
                // –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è, –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω
                if (serverEl.classList.contains('selected')) {
                    console.log(`‚ö° –£–∂–µ –Ω–∞ ${serverName}`);
                    return true;
                }
                console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ ${serverName}...`);
                serverEl.click();
                return true;
            }
        }
        console.log(`‚ùå –°–µ—Ä–≤–µ—Ä ${serverName} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        return false;
    }

    function startServerCycle() {
        if (serverCycleInterval) {
            clearInterval(serverCycleInterval);
        }

        const availableServers = getAvailableServers();
        if (availableServers.length === 0) {
            console.log('‚ùå –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        console.log(`üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 12 —Å–µ–∫—É–Ω–¥ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º: ${targetServerNames.join(', ')}`);
        
        if (targetServerNames.length === 0) {
            console.log('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ü–µ–ª–µ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã');
            updateStatus('‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã');
            return;
        }
        
        const startBtn = document.getElementById('gob-start-btn');
        if (startBtn) startBtn.textContent = '‚è∏Ô∏è –ü–∞—É–∑–∞ —Ü–∏–∫–ª–∞';
        
        let isProcessing = false;
        
        serverCycleInterval = setInterval(async () => {
            if (isProcessing) {
                console.log('‚è≥ –í—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
                return;
            }
            
            const targetServer = getNextTargetServer();
            
            if (targetServer && switchToServer(targetServer)) {
                isProcessing = true;
                
                // –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
                setTimeout(async () => {
                    const newServer = getCurrentServer();
                    if (newServer !== currentServer) {
                        currentServer = newServer;
                        console.log(`‚úÖ –¢–µ–ø–µ—Ä—å –Ω–∞ ${currentServer}`);
                        updateStatus();
                        
                        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∞ SERVER —Å–æ–æ–±—â–µ–Ω–∏–π
                        setTimeout(async () => {
                            try {
                                await checkAndSendServerMessages(currentServer);
                            } catch (error) {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
                            } finally {
                                isProcessing = false;
                            }
                        }, 3000); // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞
                    } else {
                        isProcessing = false;
                    }
                }, 2000); // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
            } else {
                console.log('‚è≠Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è, –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ');
            }
        }, 12000); // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 12 —Å–µ–∫—É–Ω–¥
    }

    function startMonitoring() {
        const chatContainer = document.getElementById('listChat');
        if (!chatContainer) {
            console.log('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...');
            setTimeout(startMonitoring, 2000);
            return;
        }

        currentServer = getCurrentServer();
        console.log(`üéÆ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞ ${currentServer}`);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        if (!sentMessages[currentServer]) {
            sentMessages[currentServer] = new Set();
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –º—É—Ç–∞—Ü–∏–π, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ö–æ—Ç–∏–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        if (observer) {
            observer.disconnect();
        }
        
        isMonitoring = true;
        console.log(`‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω`);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä
        setTimeout(async () => {
            await checkAndSendServerMessages(currentServer);
            updateStatus();
        }, 3000);
        
        // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–∏–∫–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ - –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–∏–º
        console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ UI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    async function checkAndSendServerMessages(serverName) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SERVER —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ ${serverName}...`);
        
        const messages = document.querySelectorAll('#listChat li');
        const serverMessages = [];
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!sentMessages[serverName]) {
            sentMessages[serverName] = new Set();
        }
        
        messages.forEach(message => {
            const messageData = extractServerMessage(message, serverName);
            if (messageData && !sentMessages[serverName].has(messageData.id)) {
                serverMessages.push(messageData);
                sentMessages[serverName].add(messageData.id);
            }
        });
        
        if (serverMessages.length > 0) {
            console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${serverMessages.length} –Ω–æ–≤—ã—Ö SERVER —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ ${serverName}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º...`);
            
            // –†–∞–∑–±–∏–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
            const maxMessagesPerBatch = 20;
            const batches = [];
            
            for (let i = 0; i < serverMessages.length; i += maxMessagesPerBatch) {
                batches.push(serverMessages.slice(i, i + maxMessagesPerBatch));
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            for (let i = 0; i < batches.length; i++) {
                const batch = batches[i];
                const batchText = batch.map(msg => `‚è∞ ${msg.time} - ${msg.message}`).join('\n');
                const batchInfo = batches.length > 1 ? ` (${i + 1}/${batches.length})` : '';
                const telegramMessage = `üéÆ <b>Game of Bombs</b> - <code>${serverName}</code>${batchInfo}\n\n${batchText}`;
                
                try {
                    await sendTelegramMessage(telegramMessage);
                    if (i < batches.length - 1) {
                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                        await new Promise(resolve => setTimeout(resolve, 500));
                    }
                } catch (error) {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç ${i + 1} –¥–ª—è ${serverName}:`, error);
                }
            }
            
            console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${serverMessages.length} SERVER —Å–æ–æ–±—â–µ–Ω–∏–π —Å ${serverName} –≤ ${batches.length} –ø–∞–∫–µ—Ç–µ(–∞—Ö)`);
            updateStatus();
        } else {
            console.log(`üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö SERVER —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ ${serverName}`);
        }
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (sentMessages[serverName].size > 500) {
            const oldMessages = Array.from(sentMessages[serverName]).slice(0, 250);
            oldMessages.forEach(id => sentMessages[serverName].delete(id));
            console.log(`üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${serverName}`);
        }
    }

    function extractServerMessage(messageElement, serverName) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ SERVER —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        const nicknameEl = messageElement.querySelector('.nickname');
        if (!nicknameEl || nicknameEl.textContent.trim() !== 'SERVER') {
            return null;
        }

        const textEl = messageElement.querySelector('.text span[ng-switch-default].ng-binding.ng-scope');
        const timeEl = messageElement.querySelector('.time.ng-binding');
        
        if (!textEl || !timeEl) {
            return null;
        }

        const messageText = textEl.textContent.trim();
        const timeText = timeEl.textContent.trim();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—é—â–µ–≥–æ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageId = `${serverName}-${timeText}-${messageText}`;
        
        return { 
            id: messageId,
            message: messageText, 
            time: timeText 
        };
    }

    async function sendTelegramMessage(message) {
        if (!BOT_TOKEN || !CHAT_ID || BOT_TOKEN.includes('YOUR_') || CHAT_ID.includes('YOUR_')) {
            console.error('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ BOT_TOKEN –∏ CHAT_ID!');
            return Promise.reject('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        }
        
        try {
            const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: CHAT_ID,
                    text: message,
                    parse_mode: 'HTML'
                })
            });

            if (response.ok) {
                console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`);
                return Promise.resolve();
            } else {
                const error = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ Telegram:', error);
                return Promise.reject(error);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
            return Promise.reject(error);
        }
    }

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞
    init();
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', () => {
        if (serverCycleInterval) clearInterval(serverCycleInterval);
        if (observer) observer.disconnect();
    });

})();
