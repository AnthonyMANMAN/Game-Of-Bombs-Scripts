// ==UserScript==
// @name         Game of Bombs SERVER Monitor
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Monitor Game of Bombs chat for SERVER messages and send to Telegram
// @author       You
// @match        *://gameofbombs.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // ‚ö†Ô∏è CONFIGURE THESE VALUES:
    const BOT_TOKEN = '7860609958:AAGSCiD2BFAfnUO6hWY-GW-VbKjVp2nifPY';  // Get from @BotFather
    const CHAT_ID = '-1002599400013';      // Your group chat ID (negative number)

    // Don't change anything below this line unless you know what you're doing
    
    let seenMessages = new Set();
    let observer = null;

    function init() {
        console.log('üéÆ Game of Bombs SERVER Monitor loaded');
        
        // Wait for page to load completely
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', startMonitoring);
        } else {
            startMonitoring();
        }
    }

    function startMonitoring() {
        // Wait a bit for Angular to initialize
        setTimeout(() => {
            const chatContainer = document.getElementById('listChat');
            if (!chatContainer) {
                console.log('Chat not found, retrying...');
                setTimeout(startMonitoring, 2000);
                return;
            }

            console.log('‚úÖ Started monitoring chat for SERVER messages');
            
            // Check existing messages
            checkExistingMessages();
            
            // Watch for new messages
            observer = new MutationObserver(handleChatChanges);
            observer.observe(chatContainer, {
                childList: true,
                subtree: true
            });

        }, 3000);
    }

    function checkExistingMessages() {
        const messages = document.querySelectorAll('#listChat li');
        messages.forEach(processMessage);
    }

    function handleChatChanges(mutations) {
        mutations.forEach(mutation => {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(node => {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        processMessage(node);
                    }
                });
            }
        });
    }

    function processMessage(messageElement) {
        const nicknameEl = messageElement.querySelector('.nickname');
        if (!nicknameEl || nicknameEl.textContent.trim() !== 'SERVER') return;

        const textEl = messageElement.querySelector('.text span.ng-binding.ng-scope');
        const timeEl = messageElement.querySelector('.time');
        
        if (!textEl || !timeEl) return;

        const messageText = textEl.textContent.trim();
        const timeText = timeEl.textContent.trim();
        const messageId = `${timeText}-${messageText}`;

        if (!seenMessages.has(messageId)) {
            seenMessages.add(messageId);
            sendToTelegram(messageText, timeText);
        }
    }

    async function sendToTelegram(message, time) {
        if (!BOT_TOKEN || !CHAT_ID || BOT_TOKEN.includes('YOUR_') || CHAT_ID.includes('YOUR_')) {
            console.error('‚ùå Please configure BOT_TOKEN and CHAT_ID first!');
            return;
        }

        const telegramMessage = `üéÆ <b>Game of Bombs</b>\n‚è∞ ${time}\nüìù ${message}`;
        
        try {
            const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: CHAT_ID,
                    text: telegramMessage,
                    parse_mode: 'HTML'
                })
            });

            if (response.ok) {
                console.log('‚úÖ Sent to Telegram:', message);
            } else {
                const error = await response.text();
                console.error('‚ùå Telegram API error:', error);
            }
        } catch (error) {
            console.error('‚ùå Network error:', error);
        }
    }

    // Start the monitor
    init();
})();
