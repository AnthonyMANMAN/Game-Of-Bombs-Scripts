// State variables for rotation functionality
let bot_rotationActive = false;
let bot_rotationInProgress = false;
let bot_rotationTimer = null;
let bot_rotationInterval = null;

// Create and inject rotation indicator at top center of screen
function integrateRotationControls() {
    // Remove existing indicator if it exists
    const existing = document.getElementById('rotation-indicator');
    if (existing) existing.remove();

    const container = document.createElement('div');
    container.id = 'rotation-indicator';
    container.style.cssText = `
        position: fixed;
        top: 10px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.6);
        color: white;
        padding: 4px 10px;
        border-radius: 6px;
        font-size: 14px;
        font-family: sans-serif;
        font-weight: bold;
        z-index: 9999;
    `;

    const label = document.createElement('span');
    label.textContent = 'Режим вращения: ';

    const status = document.createElement('span');
    status.id = 'rotation-status';
    status.textContent = bot_rotationActive ? 'ON' : 'OFF';
    status.style.color = bot_rotationActive ? '#4CAF50' : '#F44336';

    container.appendChild(label);
    container.appendChild(status);
    document.body.appendChild(container);
}

// Update ON/OFF status in the indicator
function updateRotationStatus(active) {
    const status = document.getElementById('rotation-status');
    if (status) {
        status.textContent = active ? 'ON' : 'OFF';
        status.style.color = active ? '#4CAF50' : '#F44336';
    }
}

// Flash the status background for visual feedback
function flashRotationStatus(color = '#FFD700', duration = 100) {
    const element = document.getElementById('rotation-indicator');
    if (element) {
        const original = element.style.backgroundColor;
        element.style.backgroundColor = color;
        setTimeout(() => {
            element.style.backgroundColor = original;
        }, duration);
    }
}

// Simulate key press
function bot_simulateKeyDown(keyCode) {
    document.dispatchEvent(new KeyboardEvent("keydown", { keyCode: keyCode }));
    if (typeof activeKeys !== 'undefined') {
        activeKeys.add(keyCode);
        updateActiveKeysDisplay();
    }
}

// Simulate key release
function bot_simulateKeyUp(keyCode) {
    document.dispatchEvent(new KeyboardEvent("keyup", { keyCode: keyCode }));
    if (typeof activeKeys !== 'undefined') {
        activeKeys.delete(keyCode);
        updateActiveKeysDisplay();
    }
}

// Start clockwise rotation
function performClockwiseRotation() {
    if (!bot_rotationActive || bot_rotationInProgress) return;

    bot_rotationInProgress = true;
    flashRotationStatus('#4CAF50', 300);

    bot_rotationTimer = setTimeout(() => {
        clearInterval(bot_rotationInterval);
        bot_rotationInProgress = false;
        flashRotationStatus('#FFD700', 300);
    }, 6600);

    let currentDirection = 0;
    const directionKeys = [39, 40, 37, 38]; // Right, Down, Left, Up

    bot_rotationInterval = setInterval(() => {
        bot_simulateKeyDown(directionKeys[currentDirection]);
        setTimeout(() => {
            bot_simulateKeyUp(directionKeys[currentDirection]);
            currentDirection = (currentDirection + 1) % 4;
        }, 5);
    }, 100);
}

// Hotkey toggle with E or Russian У
function handleRotationHotkeys(event) {
    const key = event.key.toLowerCase();
    if (key === 'e' || key === 'у') {
        bot_rotationActive = !bot_rotationActive;
        updateRotationStatus(bot_rotationActive);
        flashRotationStatus(bot_rotationActive ? '#4CAF50' : '#F44336', 300);

        if (bot_rotationActive && !bot_rotationInProgress) {
            performClockwiseRotation();
        } else if (!bot_rotationActive && bot_rotationInProgress) {
            clearTimeout(bot_rotationTimer);
            clearInterval(bot_rotationInterval);
            bot_rotationInProgress = false;

            [37, 38, 39, 40].forEach(bot_simulateKeyUp);
        }
    }
}

// Clean up on unload
window.addEventListener('beforeunload', () => {
    if (bot_rotationTimer) clearTimeout(bot_rotationTimer);
    if (bot_rotationInterval) clearInterval(bot_rotationInterval);
    [37, 38, 39, 40].forEach(bot_simulateKeyUp);
});

// Hook into the system
document.addEventListener("keydown", handleRotationHotkeys);
integrateRotationControls();
