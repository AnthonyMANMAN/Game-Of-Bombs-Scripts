// Configurable Key Spam Addon with Russian Keyboard Support
// This addon automatically cycles through keys 1-4 when toggled on by pressing И/B
(function() {
    // State variables for the spam feature
    let spamActive = false;
    let spamInterval = null;
    const DEFAULT_SPAM_DELAY = 50; // Default ms between key presses
    let currentSpamDelay = DEFAULT_SPAM_DELAY;
    
    // Keys to cycle through (restricted to 1,2,3,4 only)
    let spamKeys = [
        { keyCode: 49, label: '1', active: true },
        { keyCode: 50, label: '2', active: true },
        { keyCode: 51, label: '3', active: true },
        { keyCode: 52, label: '4', active: true }
    ];
    
    // Create UI for key configuration
    function createSpamConfigUI() {
        const uiContainer = document.getElementById('bot-ui-container');
        if (!uiContainer) return;
        
        // Create config panel that will be shown/hidden
        const configPanel = document.createElement('div');
        configPanel.id = 'spam-config-panel';
        configPanel.style.cssText = `
            display: none;
            background-color: rgba(30, 30, 30, 0.95);
            padding: 10px;
            margin-top: 8px;
            border-radius: 4px;
            border: 1px solid #444;
        `;
        
        // Create key selection grid
        const keyGrid = document.createElement('div');
        keyGrid.style.cssText = `
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 5px;
            margin-bottom: 10px;
        `;
        
        // Add key toggle buttons
        spamKeys.forEach(key => {
            const keyButton = document.createElement('button');
            keyButton.textContent = key.label;
            keyButton.dataset.keyCode = key.keyCode;
            keyButton.style.cssText = `
                background-color: ${key.active ? '#4CAF50' : '#555'};
                color: white;
                border: none;
                border-radius: 4px;
                padding: 5px;
                cursor: pointer;
                font-weight: bold;
            `;
            
            keyButton.addEventListener('click', () => {
                // Toggle key active state
                const keyIndex = spamKeys.findIndex(k => k.keyCode === parseInt(keyButton.dataset.keyCode));
                if (keyIndex !== -1) {
                    spamKeys[keyIndex].active = !spamKeys[keyIndex].active;
                    keyButton.style.backgroundColor = spamKeys[keyIndex].active ? '#4CAF50' : '#555';
                    
                    // Update key sequence display
                    updateKeySequenceDisplay();
                    
                    // Save configuration
                    saveSpamConfig();
                    
                    // If spam is active, restart with new key configuration
                    if (spamActive) {
                        stopSpamming();
                        startSpamming();
                    }
                }
            });
            
            keyGrid.appendChild(keyButton);
        });
        
        configPanel.appendChild(keyGrid);
        
        // Add speed control
        const speedContainer = document.createElement('div');
        speedContainer.style.cssText = `
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        `;
        
        const speedLabel = document.createElement('span');
        speedLabel.textContent = 'Speed:';
        speedLabel.style.marginRight = '10px';
        
        const speedSlider = document.createElement('input');
        speedSlider.type = 'range';
        speedSlider.min = '20';
        speedSlider.max = '500';
        speedSlider.step = '10';
        speedSlider.value = currentSpamDelay.toString();
        speedSlider.style.flex = '1';
        
        const speedValue = document.createElement('span');
        speedValue.textContent = `${currentSpamDelay}ms`;
        speedValue.style.marginLeft = '10px';
        speedValue.style.minWidth = '45px';
        
        speedSlider.addEventListener('input', () => {
            currentSpamDelay = parseInt(speedSlider.value);
            speedValue.textContent = `${currentSpamDelay}ms`;
            
            // If spam is active, restart with new delay
            if (spamActive) {
                stopSpamming();
                startSpamming();
            }
            
            // Save configuration
            saveSpamConfig();
        });
        
        speedContainer.appendChild(speedLabel);
        speedContainer.appendChild(speedSlider);
        speedContainer.appendChild(speedValue);
        
        configPanel.appendChild(speedContainer);
        
        // Key sequence display
        const sequenceContainer = document.createElement('div');
        sequenceContainer.style.cssText = `
            margin-bottom: 10px;
        `;
        
        const sequenceLabel = document.createElement('div');
        sequenceLabel.textContent = 'Active sequence:';
        sequenceLabel.style.marginBottom = '5px';
        
        const sequenceDisplay = document.createElement('div');
        sequenceDisplay.id = 'key-sequence-display';
        sequenceDisplay.style.cssText = `
            padding: 5px;
            background-color: rgba(0, 0, 0, 0.2);
            border-radius: 4px;
            font-family: monospace;
        `;
        
        sequenceContainer.appendChild(sequenceLabel);
        sequenceContainer.appendChild(sequenceDisplay);
        configPanel.appendChild(sequenceContainer);
        
        // Add close button
        const closeButton = document.createElement('button');
        closeButton.textContent = 'Close';
        closeButton.style.cssText = `
            background-color: #666;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
            width: 100%;
        `;
        
        closeButton.addEventListener('click', () => {
            configPanel.style.display = 'none';
        });
        
        configPanel.appendChild(closeButton);
        
        // Add config button to main UI
        const spamConfigButton = document.createElement('button');
        spamConfigButton.textContent = '⚙️';
        spamConfigButton.style.cssText = `
            background: transparent;
            border: none;
            color: white;
            font-size: 14px;
            cursor: pointer;
            padding: 2px 6px;
            margin-left: 5px;
        `;
        
        spamConfigButton.addEventListener('click', () => {
            configPanel.style.display = configPanel.style.display === 'none' ? 'block' : 'none';
            // Update key sequence display when opening
            if (configPanel.style.display === 'block') {
                updateKeySequenceDisplay();
            }
        });
        
        // Find the spam status element to place the config button next to it
        const spamStatusElement = document.getElementById('spam-status');
        if (spamStatusElement && spamStatusElement.parentNode) {
            spamStatusElement.parentNode.appendChild(spamConfigButton);
        }
        
        // Add the config panel to the container
        uiContainer.appendChild(configPanel);
        
        // Initial update of sequence display
        updateKeySequenceDisplay();
    }
    
    // Update the display showing which keys are in the sequence
    function updateKeySequenceDisplay() {
        const sequenceDisplay = document.getElementById('key-sequence-display');
        if (!sequenceDisplay) return;
        
        const activeKeys = spamKeys.filter(k => k.active).map(k => k.label);
        
        if (activeKeys.length === 0) {
            sequenceDisplay.textContent = 'No keys selected!';
            sequenceDisplay.style.color = '#F44336';
        } else {
            sequenceDisplay.textContent = activeKeys.join(' → ');
            sequenceDisplay.style.color = '#FFFFFF';
        }
    }
    
    // Save spam configuration to localStorage
    function saveSpamConfig() {
        try {
            const config = {
                keys: spamKeys.map(k => ({ keyCode: k.keyCode, label: k.label, active: k.active })),
                delay: currentSpamDelay
            };
            
            localStorage.setItem('gameBotSpamConfig', JSON.stringify(config));
            logActivity("Spam configuration saved");
        } catch (e) {
            console.error("Failed to save spam configuration:", e);
        }
    }
    
    // Load spam configuration from localStorage
    function loadSpamConfig() {
        try {
            const savedConfig = localStorage.getItem('gameBotSpamConfig');
            if (savedConfig) {
                const config = JSON.parse(savedConfig);
                
                // Update spam keys with saved configuration (only for keys 1-4)
                if (config.keys && Array.isArray(config.keys)) {
                    config.keys.forEach(savedKey => {
                        // Only apply settings for key codes 49-52 (keys 1-4)
                        if (savedKey.keyCode >= 49 && savedKey.keyCode <= 52) {
                            const keyIndex = spamKeys.findIndex(k => k.keyCode === savedKey.keyCode);
                            if (keyIndex !== -1) {
                                spamKeys[keyIndex].active = savedKey.active;
                            }
                        }
                    });
                }
                
                // Update spam delay
                if (config.delay && typeof config.delay === 'number') {
                    currentSpamDelay = config.delay;
                }
                
                logActivity("Spam configuration loaded");
                
                // Update UI if it exists
                const speedSlider = document.querySelector('#spam-config-panel input[type="range"]');
                if (speedSlider) {
                    speedSlider.value = currentSpamDelay.toString();
                    const speedValue = speedSlider.nextElementSibling;
                    if (speedValue) {
                        speedValue.textContent = `${currentSpamDelay}ms`;
                    }
                }
                
                // Update key buttons
                spamKeys.forEach(key => {
                    const keyButton = document.querySelector(`#spam-config-panel button[data-key-code="${key.keyCode}"]`);
                    if (keyButton) {
                        keyButton.style.backgroundColor = key.active ? '#4CAF50' : '#555';
                    }
                });
                
                // Update sequence display
                updateKeySequenceDisplay();
            }
        } catch (e) {
            console.error("Failed to load spam configuration:", e);
        }
    }
    
    // Simulate key press (keydown + keyup)
    function simulateKeyPress(keyCode) {
        document.dispatchEvent(new KeyboardEvent("keydown", { keyCode: keyCode }));
        setTimeout(() => {
            document.dispatchEvent(new KeyboardEvent("keyup", { keyCode: keyCode }));
        }, 10); // Small delay between down and up
    }
    
    // Start spamming keys
    function startSpamming() {
        // Clear existing interval if running
        stopSpamming();
        
        // Get active keys
        const activeKeysCodes = spamKeys.filter(k => k.active).map(k => k.keyCode);
        
        // If no keys are selected, show a warning
        if (activeKeysCodes.length === 0) {
            logActivity("No keys selected for spam! Configure keys first.");
            spamActive = false;
            updateStatus('spam-status', false);
            return;
        }
        
        let index = 0;
        spamInterval = setInterval(() => {
            simulateKeyPress(activeKeysCodes[index]);
            index = (index + 1) % activeKeysCodes.length;
        }, currentSpamDelay);
        
        // Log the active keys
        const activeKeysLabels = spamKeys.filter(k => k.active).map(k => k.label).join(', ');
        logActivity(`Key spam activated - cycling keys: ${activeKeysLabels}`);
    }
    
    // Stop spamming keys
    function stopSpamming() {
        if (spamInterval) {
            clearInterval(spamInterval);
            spamInterval = null;
            logActivity("Key spam deactivated");
        }
    }
    
    // Initialize function for the addon
    function initialize() {
        // Try to load saved configuration
        loadSpamConfig();
        
        // Create the configuration UI
        createSpamConfigUI();
        
        // Start in deactivated state
        updateStatus('spam-status', spamActive);
        logActivity("Configurable Key Spam initialized (Keys 1-4 only)");
    }
    
    // Cleanup function
    function cleanup() {
        stopSpamming();
        spamActive = false;
        updateStatus('spam-status', false);
        logActivity("Key Spam disabled");
        
        // Remove config panel if it exists
        const configPanel = document.getElementById('spam-config-panel');
        if (configPanel) {
            configPanel.remove();
        }
    }
    
    // Toggle spam mode
    function toggleSpamMode() {
        spamActive = !spamActive;
        updateStatus('spam-status', spamActive);
        
        if (spamActive) {
            startSpamming();
        } else {
            stopSpamming();
        }
    }
    
    // Handle keydown events - support both Latin 'B' and Cyrillic 'И' (which is on the same key as 'B')
    function onKeyDown(event) {
        // Check for both Latin 'b' and Cyrillic 'и' (Russian B key)
        if (event.key.toLowerCase() === 'b' || event.key === 'и' || event.key === 'И') {
            toggleSpamMode();
        }
    }
    
    // Register the feature with the addon manager
    window.gameBotAddonManager.registerFeature('spam-status', {
        label: 'Спам Перками (B/И)',
        initialActive: spamActive,
        initialize: initialize,
        cleanup: cleanup,
        onKeyDown: onKeyDown
    });
})();
