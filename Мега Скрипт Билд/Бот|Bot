// Random Movement with Bombs Addon
// This addon makes the character move in random directions and place bombs

// Global variables for random movement
let rm_firstScriptActive = false;
let rm_moveTimeout = null;
let rm_currentDirection = null;

// Define key codes
const rm_ee = {
    up: { keyCode: 87, key: "w" },
    left: { keyCode: 65, key: "a" },
    down: { keyCode: 83, key: "s" },
    right: { keyCode: 68, key: "d" },
    upLeft: { keys: [87, 65] },
    upRight: { keys: [87, 68] },
    downLeft: { keys: [83, 65] },
    downRight: { keys: [83, 68] }
};

// Create UI for this functionality
function rm_createUI() {
    // Check if main UI container exists
    const botUiContainer = document.getElementById('bot-ui-container');
    if (!botUiContainer) {
        console.log("Main bot UI not found. Random Movement will retry in 1 second.");
        setTimeout(rm_createUI, 1000);
        return;
    }
    
    // Remove any existing controls to prevent duplicates
    const existingControl = document.getElementById('movement-status');
    if (existingControl && existingControl.parentElement) {
        existingControl.parentElement.remove();
    }
    
    // Create movement container
    const movementContainer = document.createElement('div');
    movementContainer.style.cssText = `
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        align-items: center;
    `;
    
    const movementLabel = document.createElement('span');
    movementLabel.textContent = 'Бот с Бомбами (Z)';
    
    const movementStatus = document.createElement('span');
    movementStatus.id = 'movement-status';
    movementStatus.textContent = rm_firstScriptActive ? 'ON' : 'OFF';
    movementStatus.style.cssText = `
        font-weight: bold;
        color: ${rm_firstScriptActive ? '#4CAF50' : '#F44336'};
        background-color: rgba(0, 0, 0, 0.3);
        padding: 2px 6px;
        border-radius: 4px;
        transition: background-color 0.2s ease;
    `;
    
    movementContainer.appendChild(movementLabel);
    movementContainer.appendChild(movementStatus);
    
    // Insert at the top of the UI (right after the header)
    const header = botUiContainer.querySelector('div:first-child');
    if (header && header.nextSibling) {
        botUiContainer.insertBefore(movementContainer, header.nextSibling);
    } else {
        // Fallback: append to the main container
        botUiContainer.appendChild(movementContainer);
    }
    
    // Log the addition
    if (typeof logActivity === 'function') {
        logActivity("Random Movement UI added");
    } else {
        console.log("Random Movement UI added");
    }
}

// Update movement status display
function rm_updateStatus() {
    const movementStatus = document.getElementById('movement-status');
    if (movementStatus) {
        movementStatus.textContent = rm_firstScriptActive ? 'ON' : 'OFF';
        movementStatus.style.color = rm_firstScriptActive ? '#4CAF50' : '#F44336';
    }
}

// Flash effect for visual feedback
function rm_flashStatus(color = '#FFD700', duration = 100) {
    const element = document.getElementById('movement-status');
    if (element) {
        const originalBackground = element.style.backgroundColor;
        element.style.backgroundColor = color;
        setTimeout(() => {
            element.style.backgroundColor = originalBackground;
        }, duration);
    }
}

// Function to simulate key press down, with integration to main script if available
function rm_simulateKeyDown(direction) {
    if (typeof direction === 'number') {
        // Handle single key code
        document.dispatchEvent(new KeyboardEvent("keydown", { keyCode: direction }));
        
        // Integrate with main script's active keys tracking if available
        if (typeof window.activeKeys !== 'undefined') {
            window.activeKeys.add(direction);
            if (typeof window.updateActiveKeysDisplay === 'function') {
                window.updateActiveKeysDisplay();
            }
        }
        return;
    }
    
    if (direction.keys) {
        // Handle multiple keys
        direction.keys.forEach(keyCode => {
            document.dispatchEvent(new KeyboardEvent("keydown", { keyCode: keyCode }));
            
            // Integrate with main script's active keys tracking if available
            if (typeof window.activeKeys !== 'undefined') {
                window.activeKeys.add(keyCode);
            }
        });
    } else {
        // Handle single key in direction object
        document.dispatchEvent(new KeyboardEvent("keydown", { 
            keyCode: direction.keyCode,
            key: direction.key 
        }));
        
        // Integrate with main script's active keys tracking if available
        if (typeof window.activeKeys !== 'undefined') {
            window.activeKeys.add(direction.keyCode);
        }
    }
    
    // Update display if available
    if (typeof window.updateActiveKeysDisplay === 'function') {
        window.updateActiveKeysDisplay();
    }
    
    // Update direction indicator if available
    if (typeof window.updateDirectionIndicator === 'function') {
        window.updateDirectionIndicator(direction);
    }
}

// Function to simulate key release, with integration to main script if available
function rm_simulateKeyUp(direction) {
    if (typeof direction === 'number') {
        // Handle single key code
        document.dispatchEvent(new KeyboardEvent("keyup", { keyCode: direction }));
        
        // Integrate with main script's active keys tracking if available
        if (typeof window.activeKeys !== 'undefined') {
            window.activeKeys.delete(direction);
            if (typeof window.updateActiveKeysDisplay === 'function') {
                window.updateActiveKeysDisplay();
            }
        }
        return;
    }
    
    if (direction.keys) {
        // Handle multiple keys
        direction.keys.forEach(keyCode => {
            document.dispatchEvent(new KeyboardEvent("keyup", { keyCode: keyCode }));
            
            // Integrate with main script's active keys tracking if available
            if (typeof window.activeKeys !== 'undefined') {
                window.activeKeys.delete(keyCode);
            }
        });
    } else {
        // Handle single key in direction object
        document.dispatchEvent(new KeyboardEvent("keyup", { 
            keyCode: direction.keyCode,
            key: direction.key 
        }));
        
        // Integrate with main script's active keys tracking if available
        if (typeof window.activeKeys !== 'undefined') {
            window.activeKeys.delete(direction.keyCode);
        }
    }
    
    // Update display if available
    if (typeof window.updateActiveKeysDisplay === 'function') {
        window.updateActiveKeysDisplay();
    }
    
    // Update direction indicator if available
    if (typeof window.updateDirectionIndicator === 'function') {
        window.updateDirectionIndicator(null);
    }
}

// Get random direction
function rm_getRandomDirection() {
    const directions = [
        rm_ee.right, rm_ee.down, rm_ee.left, rm_ee.up, 
        rm_ee.upLeft, rm_ee.upRight, rm_ee.downLeft, rm_ee.downRight
    ];
    return directions[Math.floor(Math.random() * directions.length)];
}

// Get random delay
function rm_getRandomDelay(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Get random pause
function rm_getRandomPause(min, max) {
    return Math.random() * (max - min) + min;
}

// Function to place a bomb (press 'K')
function rm_placeBomb() {
    if (!rm_firstScriptActive) return;
    
    // Press K
    var bombKeyEvent = new KeyboardEvent("keydown", { keyCode: 75, key: "k" });
    document.dispatchEvent(bombKeyEvent);
    
    // Update activeKeys if available
    if (typeof window.activeKeys !== 'undefined') {
        window.activeKeys.add(75);
        if (typeof window.updateActiveKeysDisplay === 'function') {
            window.updateActiveKeysDisplay();
        }
    }
    
    // Release K after short delay
    setTimeout(() => {
        var bombKeyReleaseEvent = new KeyboardEvent("keyup", { keyCode: 75, key: "k" });
        document.dispatchEvent(bombKeyReleaseEvent);
        
        // Update activeKeys if available
        if (typeof window.activeKeys !== 'undefined') {
            window.activeKeys.delete(75);
            if (typeof window.updateActiveKeysDisplay === 'function') {
                window.updateActiveKeysDisplay();
            }
        }
    }, 100);
    
    // Visual feedback - occasionally to reduce flickering
    if (Math.random() < 0.1) { // 10% chance to flash
        rm_flashStatus('#FFD700');
    }
}

// Function to simulate random direction presses during pauses
function rm_randomDirectionPress() {
    if (!rm_firstScriptActive) return;
    
    const directions = [rm_ee.up, rm_ee.left, rm_ee.down, rm_ee.right];
    const direction = directions[Math.floor(Math.random() * directions.length)];
    
    // Press random direction key for 50ms
    rm_simulateKeyDown(direction);
    setTimeout(() => {
        rm_simulateKeyUp(direction);
    }, 50);
}

// Main function to move character in random directions
function rm_moveCharacter() {
    if (!rm_firstScriptActive) return;
    
    const direction = rm_getRandomDirection();
    const delay = rm_getRandomDelay(900, 1500); // Movement duration
    const pauseTime = rm_getRandomPause(125, 1000); // Pause duration
    
    // Clear any existing movement timeout
    if (rm_moveTimeout) {
        clearTimeout(rm_moveTimeout);
    }
    
    // Release any current direction keys
    if (rm_currentDirection) {
        rm_simulateKeyUp(rm_currentDirection);
    }
    
    // Place bomb before moving
    rm_placeBomb();
    
    // Set the new direction
    rm_currentDirection = direction;
    
    // Start moving after short delay for bomb placement
    setTimeout(() => {
        rm_simulateKeyDown(direction);
        
        rm_moveTimeout = setTimeout(() => {
            rm_simulateKeyUp(direction); // Stop current movement
            rm_currentDirection = null;
            
            // Random direction press during pause
            rm_randomDirectionPress();
            
            // Schedule next movement
            rm_moveTimeout = setTimeout(rm_moveCharacter, pauseTime);
        }, delay);
    }, 100);
}

// Toggle random movement with Z key
document.addEventListener("keydown", (event) => {
    if (event.key === "z" || event.key === "Z") {
        rm_firstScriptActive = !rm_firstScriptActive;
        rm_updateStatus();
        
        if (rm_firstScriptActive) {
            if (typeof logActivity === 'function') {
                logActivity("Random movement with bombs enabled");
            } else {
                console.log("Random movement with bombs enabled");
            }
            rm_moveCharacter(); // Start movement
        } else {
            if (typeof logActivity === 'function') {
                logActivity("Random movement with bombs disabled");
            } else {
                console.log("Random movement with bombs disabled");
            }
            
            // Stop all movement
            if (rm_moveTimeout) {
                clearTimeout(rm_moveTimeout);
                rm_moveTimeout = null;
            }
            
            // Release current direction keys
            if (rm_currentDirection) {
                rm_simulateKeyUp(rm_currentDirection);
                rm_currentDirection = null;
                
                // Update direction indicator if available
                if (typeof window.updateDirectionIndicator === 'function') {
                    window.updateDirectionIndicator(null);
                }
            }
        }
    }
});

// Clean up on page unload
window.addEventListener('beforeunload', () => {
    if (rm_moveTimeout) {
        clearTimeout(rm_moveTimeout);
    }
    
    if (rm_currentDirection) {
        rm_simulateKeyUp(rm_currentDirection);
    }
});

// Initialize
rm_createUI();

// Extend the fixGameBot function if it exists
if (typeof window.fixGameBot !== 'undefined') {
    const originalFixGameBot = window.fixGameBot;
    window.fixGameBot = function() {
        // Call the original function
        const result = originalFixGameBot();
        
        // Re-add our UI
        rm_createUI();
        
        // Restart movement if active
        if (rm_firstScriptActive) {
            // First clear any existing movement
            if (rm_moveTimeout) {
                clearTimeout(rm_moveTimeout);
            }
            if (rm_currentDirection) {
                rm_simulateKeyUp(rm_currentDirection);
                rm_currentDirection = null;
            }
            
            // Then restart
            rm_moveCharacter();
        }
        
        return result + " Random Movement restored.";
    };
} else {
    // Create a new fixGameBot function if it doesn't exist
    window.fixGameBot = function() {
        rm_createUI();
        return "Random Movement restored.";
    };
}
