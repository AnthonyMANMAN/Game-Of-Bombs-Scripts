// Cross Movement Addon for Game Bot Framework
// This addon adds modified movement pattern functionality to the base bot framework
// Pattern: up-down twice, then left-right twice

// Create module-level variables outside the addon object to solve 'this' context issues
let crossMovement_isRunning = false;
let crossMovement_loopTimer = null;
let crossMovement_enabled = false;

// Helper functions at module level
function crossMovement_updateStatusDisplay(enabled) {
    const statusElement = document.getElementById('cross-movement-status');
    if (statusElement) {
        statusElement.textContent = enabled ? 'ON' : 'OFF';
        statusElement.style.backgroundColor = enabled ? '#4CAF50' : '#F44336';
    }
}

function crossMovement_createControlInterface() {
    // Remove existing indicator if it exists
    const existingElement = document.getElementById('cross-movement-indicator');
    if (existingElement) existingElement.remove();
    
    const uiContainer = document.createElement('div');
    uiContainer.id = 'cross-movement-indicator';
    uiContainer.style.cssText = `
        position: fixed;
        top: 55px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 8px 15px;
        border-radius: 20px;
        font-size: 14px;
        font-family: Arial, sans-serif;
        font-weight: 500;
        z-index: 9999;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);
        display: flex;
        align-items: center;
        transition: background-color 0.3s ease;
    `;
    
    const labelText = document.createElement('span');
    labelText.textContent = 'Двиг Крестом: ';
    labelText.style.marginRight = '5px';
    
    const statusDisplay = document.createElement('span');
    statusDisplay.id = 'cross-movement-status';
    statusDisplay.textContent = crossMovement_enabled ? 'ON' : 'OFF';
    statusDisplay.style.cssText = `
        font-weight: bold;
        padding: 2px 8px;
        border-radius: 12px;
        background-color: ${crossMovement_enabled ? '#4CAF50' : '#F44336'};
        transition: background-color 0.3s ease;
    `;
    
    // Add keyboard shortcut hint
    const keyboardHint = document.createElement('span');
    keyboardHint.textContent = ' [M]';
    keyboardHint.style.cssText = `
        opacity: 0.7;
        font-size: 12px;
        margin-left: 8px;
    `;
    
    uiContainer.appendChild(labelText);
    uiContainer.appendChild(statusDisplay);
    uiContainer.appendChild(keyboardHint);
    document.body.appendChild(uiContainer);
    
    // Auto-hide after 3 seconds, show on hover
    setTimeout(() => {
        uiContainer.style.opacity = '0.6';
    }, 3000);
    
    uiContainer.addEventListener('mouseenter', () => {
        uiContainer.style.opacity = '1';
    });
    
    uiContainer.addEventListener('mouseleave', () => {
        uiContainer.style.opacity = '0.6';
    });
}

function crossMovement_startMovementPattern() {
    if (!crossMovement_enabled) return;
    
    // Only start if not already in progress
    if (crossMovement_isRunning) return;
    
    crossMovement_isRunning = true;
    
    let stepIndex = 0;
    // Modified sequence: Up-Down-Up-Down-Left-Right-Left-Right
    // W(up), S(down), A(left), D(right) to arrow key codes
    const movementSequence = [
        38, 40,  // Up, Down (first time)
        38, 40,  // Up, Down (second time)
        37, 39,  // Left, Right (first time)
        37, 39   // Left, Right (second time)
    ];
    
    crossMovement_loopTimer = setInterval(() => {
        // Use the framework's key simulation functions
        simulateKeyDown(movementSequence[stepIndex]);
        
        setTimeout(() => {
            simulateKeyUp(movementSequence[stepIndex]);
            stepIndex = (stepIndex + 1) % 8; // Cycle through all 8 steps
        }, 5);
    }, 200);
}

function crossMovement_stopMovementPattern() {
    if (crossMovement_loopTimer) {
        clearInterval(crossMovement_loopTimer);
        crossMovement_loopTimer = null;
    }
    
    crossMovement_isRunning = false;
    
    // Release all arrow keys if they're being held
    [37, 38, 39, 40].forEach(keyCode => {
        simulateKeyUp(keyCode);
    });
}

// Register the cross movement addon with the bot framework
window.gameBotAddonManager.registerFeature('crossMovementAddon', {
    label: 'Двиг Крестом',
    initialActive: false,
    
    // Initialize the addon
    initialize: function() {
        // Add visualization for movement state in the main UI
        logActivity("Modified cross movement addon initialized - use 'M' key to toggle");
        
        // Create movement indicator UI element
        crossMovement_createControlInterface();
        
        // Set the initial active state
        crossMovement_enabled = this.active;
        
        // Initial UI status update
        updateStatus('crossMovementAddon', this.active);
    },
    
    // Cleanup when the addon is disabled
    cleanup: function() {
        // Clear any ongoing movement pattern
        crossMovement_stopMovementPattern();
        
        // Remove movement indicator if it exists
        const indicator = document.getElementById('cross-movement-indicator');
        if (indicator) indicator.remove();
        
        logActivity("Modified cross movement addon cleanup complete");
    },
    
    // Handle keydown events
    onKeyDown: function(event) {
        const key = event.key.toLowerCase();
        // Toggle cross movement mode with M key
        if (key === 'm') {
            this.active = !this.active;
            crossMovement_enabled = this.active;
            updateStatus('crossMovementAddon', this.active);
            
            // Make the indicator fully visible when toggling
            const indicator = document.getElementById('cross-movement-indicator');
            if (indicator) {
                indicator.style.opacity = '1';
                // Reset the fade timeout
                clearTimeout(indicator.fadeTimeout);
                indicator.fadeTimeout = setTimeout(() => {
                    indicator.style.opacity = '0.6';
                }, 3000);
            }
            
            // Start or stop movement pattern based on active state
            if (crossMovement_enabled) {
                crossMovement_startMovementPattern();
                logActivity("Modified movement mode activated - up-down twice, left-right twice pattern");
            } else {
                crossMovement_stopMovementPattern();
                logActivity("Modified movement mode deactivated");
            }
            
            // Update the standalone indicator
            crossMovement_updateStatusDisplay(crossMovement_enabled);
        }
    },
    
    // Placeholder for onKeyUp - not used in this addon but required by framework
    onKeyUp: function(event) {
        // No special handling needed for keyup events
    }
});

// Log that the addon was loaded
logActivity("Modified cross movement addon loaded - Press 'M' to toggle up-down twice, left-right twice pattern");
