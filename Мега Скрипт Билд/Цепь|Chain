/**
 * Auto Chain Addon - Rapidly places bombs when activated
 * This addon properly integrates with the Game Bot Framework using the addon manager
 * Modified to support both English and Russian keyboard layouts
 */

// Create module-level variables outside the addon object to solve 'this' context issues
let autoChain_active = false;
let autoChain_interval = null;

// Create UI for this functionality
function autoChain_createUI() {
    // Check if main UI container exists
    const botUiContainer = document.getElementById('bot-ui-container');
    if (!botUiContainer) {
        console.log("Main bot UI not found. Auto Chain will retry in 1 second.");
        setTimeout(autoChain_createUI, 1000);
        return;
    }
    
    // Remove any existing controls to prevent duplicates
    const existingControl = document.getElementById('auto-chain-status');
    if (existingControl && existingControl.parentElement) {
        existingControl.parentElement.remove();
    }
    
    // Create container
    const autoChainContainer = document.createElement('div');
    autoChainContainer.style.cssText = `
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        align-items: center;
    `;
    
    const autoChainLabel = document.createElement('span');
    autoChainLabel.textContent = 'Цепь (C/С)'; // Added Cyrillic 'С' option
    
    const autoChainStatus = document.createElement('span');
    autoChainStatus.id = 'auto-chain-status';
    autoChainStatus.textContent = autoChain_active ? 'ON' : 'OFF';
    autoChainStatus.style.cssText = `
        font-weight: bold;
        color: ${autoChain_active ? '#4CAF50' : '#F44336'};
        background-color: rgba(0, 0, 0, 0.3);
        padding: 2px 6px;
        border-radius: 4px;
        transition: background-color 0.2s ease;
    `;
    
    autoChainContainer.appendChild(autoChainLabel);
    autoChainContainer.appendChild(autoChainStatus);
    
    // Find the movement UI to insert after it
    const movementStatusElement = document.getElementById('movement-status');
    let referenceNode = null;
    
    if (movementStatusElement) {
        // Find the parent div containing the movement status
        referenceNode = movementStatusElement.parentElement;
        if (referenceNode && referenceNode.nextSibling) {
            // Insert after the movement container
            botUiContainer.insertBefore(autoChainContainer, referenceNode.nextSibling);
        } else {
            // Fallback: insert after header
            const header = botUiContainer.querySelector('div:first-child');
            if (header && header.nextSibling) {
                botUiContainer.insertBefore(autoChainContainer, header.nextSibling);
            } else {
                // Last resort: append to container
                botUiContainer.appendChild(autoChainContainer);
            }
        }
    } else {
        // Movement UI not found, insert after header
        const header = botUiContainer.querySelector('div:first-child');
        if (header && header.nextSibling) {
            botUiContainer.insertBefore(autoChainContainer, header.nextSibling);
        } else {
            // Fallback: append to container
            botUiContainer.appendChild(autoChainContainer);
        }
    }
    
    // Log the addition
    if (typeof logActivity === 'function') {
        logActivity("Auto Chain UI added");
    } else {
        console.log("Auto Chain UI added");
    }
}

// Update auto chain status display
function autoChain_updateStatus() {
    const autoChainStatus = document.getElementById('auto-chain-status');
    if (autoChainStatus) {
        autoChainStatus.textContent = autoChain_active ? 'ON' : 'OFF';
        autoChainStatus.style.color = autoChain_active ? '#4CAF50' : '#F44336';
    }
}

// Flash effect for visual feedback - text color only, no background
function autoChain_flashStatus(duration = 100) {
    const element = document.getElementById('auto-chain-status');
    if (element) {
        const originalColor = element.style.color;
        element.style.color = '#FFFFFF';
        setTimeout(() => {
            element.style.color = originalColor;
        }, duration);
    }
}

// Function to start the auto chain bomb spam
function autoChain_startSpamming() {
    // Stop any existing interval first
    autoChain_stopSpamming();
    
    // Start new interval
    autoChain_interval = setInterval(() => {
        if (autoChain_active) {
            // Simulate K keypress (place bomb) as fast as possible
            document.dispatchEvent(new KeyboardEvent("keydown", { keyCode: 75, key: "k" }));
            
            // Update activeKeys if available
            if (typeof window.activeKeys !== 'undefined') {
                window.activeKeys.add(75);
                if (typeof window.updateActiveKeysDisplay === 'function') {
                    window.updateActiveKeysDisplay();
                }
            }
            
            // Release K key immediately for rapid spam
            setTimeout(() => {
                document.dispatchEvent(new KeyboardEvent("keyup", { keyCode: 75, key: "k" }));
                
                // Update activeKeys if available
                if (typeof window.activeKeys !== 'undefined') {
                    window.activeKeys.delete(75);
                    if (typeof window.updateActiveKeysDisplay === 'function') {
                        window.updateActiveKeysDisplay();
                    }
                }
            }, 10);
        }
    }, 20); // 20ms interval for very fast bomb spam
    
    if (typeof logActivity === 'function') {
        logActivity("Auto Chain spam started");
    } else {
        console.log("Auto Chain spam started");
    }
}

// Function to stop the auto chain bomb spam
function autoChain_stopSpamming() {
    if (autoChain_interval) {
        clearInterval(autoChain_interval);
        autoChain_interval = null;
    }
}

// Toggle Auto Chain with both English 'C' and Russian 'С' keys
document.addEventListener("keydown", (event) => {
    // Check for both English 'c' and Russian 'с' (Cyrillic)
    // The Russian 'с' has Unicode: U+0441
    if (event.key === "c" || event.key === "C" || event.key === "с" || event.key === "С") {
        autoChain_active = !autoChain_active;
        autoChain_updateStatus();
        
        if (autoChain_active) {
            if (typeof logActivity === 'function') {
                logActivity("Auto Chain enabled");
            } else {
                console.log("Auto Chain enabled");
            }
            autoChain_startSpamming(); // Start bombing
        } else {
            if (typeof logActivity === 'function') {
                logActivity("Auto Chain disabled");
            } else {
                console.log("Auto Chain disabled");
            }
            autoChain_stopSpamming(); // Stop bombing
        }
    }
});

// Clean up on page unload
window.addEventListener('beforeunload', () => {
    autoChain_stopSpamming();
});

// Initialize
autoChain_createUI();

// Extend the fixGameBot function if it exists
if (typeof window.fixGameBot !== 'undefined') {
    const originalFixGameBot = window.fixGameBot;
    window.fixGameBot = function() {
        // Call the original function
        const result = originalFixGameBot();
        
        // Re-add our UI
        autoChain_createUI();
        
        // Restart auto chain if active
        if (autoChain_active) {
            // First clear any existing interval
            autoChain_stopSpamming();
            
            // Then restart
            autoChain_startSpamming();
        }
        
        return result + " Auto Chain restored.";
    };
} else {
    // Create a new fixGameBot function if it doesn't exist
    window.fixGameBot = function() {
        autoChain_createUI();
        return "Auto Chain restored.";
    };
}

// Log that the script has loaded
console.log('[Auto Chain Addon] Loaded successfully with Russian keyboard support!');
